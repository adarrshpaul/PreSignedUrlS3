AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for using pre-signed URLs to upload files to Amazon S3'

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: YOUR_BUCKET_NAME
      CorsConfiguration:
        CorsRules:
        - AllowedMethods:
          - GET
          - PUT
          - POST
          AllowedOrigins:
          - '*'
          AllowedHeaders:
          - '*'
          ExposedHeaders:
          - ETag
          - Content-Length
          - Content-Type
          - Date
          - Server
          MaxAge: 3000
          
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: YOUR_LAMBDA_FUNCTION_NAME
      Code:
        S3Bucket: AWS-Lambda-S3
        S3Key: YOUR_LAMBDA_FUNCTION_CODE.zip
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs14.x

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: YOUR_TABLE_NAME
      AttributeDefinitions:
        - AttributeName: uploadId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: uploadId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: YOUR_INDEX_NAME
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: uploadId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 's3-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
        - PolicyName: 'LambdaPolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/YOUR_TABLE_NAME"

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: YOUR_API_NAME
      ProtocolType: HTTP

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000

  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'POST /upload'
      Target: !Sub 'integrations/${ApiGatewayIntegration.Id}'

  ApiGatewayDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref ApiGateway

 
